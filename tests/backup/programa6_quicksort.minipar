INT array_global[100];
INT tamanho_global;

class Quicksort {
    
    VOID ordenar() {
        this.quicksort_recursivo(0, tamanho_global - 1);
    }
    
    VOID quicksort_recursivo(INT low, INT high) {
        if low < high {
            INT pi;
            pi = this.partition(low, high);
            this.quicksort_recursivo(low, pi - 1);
            this.quicksort_recursivo(pi + 1, high);
        }
    }
    
    INT partition(INT low, INT high) {
        INT pivot;
        INT i;
        INT j;
        
        pivot = array_global[high];
        i = low - 1;
        
        for j = low; j < high; j = j + 1 {
            if array_global[j] <= pivot {
                i = i + 1;
                this.swap(i, j);
            }
        }
        
        this.swap(i + 1, high);
        return i + 1;
    }
    
    VOID swap(INT i, INT j) {
        INT temp;
        temp = array_global[i];
        array_global[i] = array_global[j];
        array_global[j] = temp;
    }
}

VOID main() {
    print("==== Ordenacao com Quicksort ====");
    print("Insira os elementos do vetor separados por espaco:");
    
    STRING entrada;
    entrada = input();
    
    INT count;
    INT i;
    STRING numero_str;
    STRING char_atual;
    
    count = 0;
    i = 0;
    numero_str = "";
    
    for i = 0; i < strlen(entrada); i = i + 1 {
        char_atual = charat(entrada, i);
        
        if char_atual == " " {
            if strlen(numero_str) > 0 {
                array_global[count] = parseint(numero_str);
                count = count + 1;
                numero_str = "";
            }
        } else {
            numero_str = numero_str + char_atual;
        }
    }
    
    if strlen(numero_str) > 0 {
        array_global[count] = parseint(numero_str);
        count = count + 1;
    }
    
    tamanho_global = count;
    
    if tamanho_global == 0 {
        print("Nenhum numero encontrado!");
    } else {
        STRING vetor_original;
        STRING vetor_ordenado;
        
        if tamanho_global == 1 {
            vetor_original = "[" + array_global[0] + "]";
        } else {
            vetor_original = "[" + array_global[0];
            for i = 1; i < tamanho_global; i = i + 1 {
                vetor_original = vetor_original + ", " + array_global[i];
            }
            vetor_original = vetor_original + "]";
        }
        
        print("Vetor original: " + vetor_original);
        
        Quicksort sorter;
        sorter = new Quicksort();
        sorter.ordenar();
        
        if tamanho_global == 1 {
            vetor_ordenado = "[" + array_global[0] + "]";
        } else {
            vetor_ordenado = "[" + array_global[0];
            for i = 1; i < tamanho_global; i = i + 1 {
                vetor_ordenado = vetor_ordenado + ", " + array_global[i];
            }
            vetor_ordenado = vetor_ordenado + "]";
        }
        
        print("Vetor ordenado: " + vetor_ordenado);
    }
}

SEQ {
    main();
}