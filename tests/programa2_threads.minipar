C_CHANNEL canal_resultados;

INT calcular_fatorial(INT n) {
    INT fatorial;
    INT i;
    fatorial = 1;
    for i = 1; i <= n; i = i + 1 {
        fatorial = fatorial * i;
    }
    return fatorial;
}

VOID thread_fatorial() {
    INT n;
    INT fatorial;
    n = 5;
    fatorial = calcular_fatorial(n);
    
    canal_resultados.send(fatorial);
    
    print("Thread Fatorial finalizada com resultado:");
    print(fatorial);
}

VOID thread_fibonacci() {
    INT n;
    INT a;
    INT b;
    INT temp;
    INT i;
    
    n = 5;
    a = 0;
    b = 1;

    for i = 0; i < n; i = i + 1 {
        canal_resultados.send(a);
        temp = a + b;
        a = b;
        b = temp;
    }
    print("Thread Fibonacci finalizada");
}

PAR {
    thread_fatorial();
    thread_fibonacci();
}

SEQ {
    INT recebido;
    INT i;
    
    print("Recebendo resultados:");
    for i = 0; i < 6; i = i + 1 {
        canal_resultados.receive(recebido);
        print(recebido);
    }

    print("Execucao paralela finalizada");
}
