FLOAT max_float(FLOAT a, FLOAT b) {
    if a > b {
        return a;
    }
    return b;
}

FLOAT relu_func(FLOAT x) {
    return max_float(0, x);
}

FLOAT sigmoid_func(FLOAT x) {
    FLOAT result;
    if x > 5 {
        result = 0.993;
    } else if x > 3 {
        result = 0.952;
    } else if x > 2 {
        result = 0.880;
    } else if x > 1 {
        result = 0.731;
    } else if x > 0 {
        result = 0.622;
    } else if x > -1 {
        result = 0.378;
    } else if x > -2 {
        result = 0.269;
    } else if x > -3 {
        result = 0.120;
    } else {
        result = 0.047;
    }
    return result;
}

class Produto {
    STRING nome;
    
    VOID setNome(STRING n) {
        this.nome = n;
    }
    
    STRING getNome() {
        return this.nome;
    }
}

class Categoria {
    STRING nome;
    Produto produtos[4];
    INT n_produtos;
    
    VOID inicializar(STRING n) {
        this.nome = n;
        this.n_produtos = 0;
    }
    
    VOID adicionarProduto(STRING nome_produto) {
        this.produtos[this.n_produtos] = new Produto();
        this.produtos[this.n_produtos].setNome(nome_produto);
        this.n_produtos = this.n_produtos + 1;
    }
}

class Usuario {
    STRING historico_compras[4];
    INT n_historico;
    
    VOID inicializar() {
        this.n_historico = 0;
    }
    
    VOID adicionarCompra(STRING produto) {
        this.historico_compras[this.n_historico] = produto;
        this.n_historico = this.n_historico + 1;
    }
    
    VOID codificar_historico(STRING todos_produtos[16], INT n_produtos, INT codificacao[16]) {
        INT i;
        INT j;
        INT encontrado;
        
        for i = 0; i < n_produtos; i = i + 1 {
            encontrado = 0;
            for j = 0; j < this.n_historico; j = j + 1 {
                if todos_produtos[i] == this.historico_compras[j] {
                    encontrado = 1;
                }
            }
            codificacao[i] = encontrado;
        }
    }
}

class RedeNeural {
    FLOAT W1[16][10];
    FLOAT b1[10];
    FLOAT W2[10][16];
    FLOAT b2[16];
    INT input_size;
    INT hidden_size;
    INT output_size;
    
    VOID inicializar(INT in_size, INT hid_size, INT out_size) {
        INT i;
        INT j;
        
        this.input_size = in_size;
        this.hidden_size = hid_size;
        this.output_size = out_size;
        
        for i = 0; i < in_size; i = i + 1 {
            for j = 0; j < hid_size; j = j + 1 {
                this.W1[i][j] = 0.5;
            }
        }
        
        for i = 0; i < hid_size; i = i + 1 {
            this.b1[i] = 0.5;
        }
        
        for i = 0; i < hid_size; i = i + 1 {
            for j = 0; j < out_size; j = j + 1 {
                this.W2[i][j] = 0.5;
            }
        }
        
        for i = 0; i < out_size; i = i + 1 {
            this.b2[i] = 0.5;
        }
    }
    
    VOID forward(INT X[16], FLOAT saida[16]) {
        FLOAT Z1[10];
        FLOAT A1[10];
        FLOAT Z2[16];
        INT i;
        INT j;
        
        for i = 0; i < this.hidden_size; i = i + 1 {
            Z1[i] = 0;
            for j = 0; j < this.input_size; j = j + 1 {
                Z1[i] = Z1[i] + X[j] * this.W1[j][i];
            }
            Z1[i] = Z1[i] + this.b1[i];
            A1[i] = relu_func(Z1[i]);
        }
        
        for i = 0; i < this.output_size; i = i + 1 {
            Z2[i] = 0;
            for j = 0; j < this.hidden_size; j = j + 1 {
                Z2[i] = Z2[i] + A1[j] * this.W2[j][i];
            }
            Z2[i] = Z2[i] + this.b2[i];
            saida[i] = sigmoid_func(Z2[i]);
        }
    }
}

class Recomendador {
    Usuario usuario;
    Categoria categorias[4];
    INT n_categorias;
    STRING todos_produtos[16];
    INT n_produtos;
    
    VOID inicializar(Usuario user) {
        this.usuario = user;
        this.n_categorias = 0;
        this.n_produtos = 0;
    }
    
    VOID adicionarCategoria(Categoria cat) {
        INT j;
        
        this.categorias[this.n_categorias] = cat;
        
        for j = 0; j < cat.n_produtos; j = j + 1 {
            this.todos_produtos[this.n_produtos] = cat.produtos[j].getNome();
            this.n_produtos = this.n_produtos + 1;
        }
        
        this.n_categorias = this.n_categorias + 1;
    }
    
    VOID recomendar() {
        INT entrada_codificada[16];
        FLOAT saida[16];
        RedeNeural rede;
        INT i;
        INT j;
        INT ja_comprou;
        Usuario user_local;
        
        user_local = this.usuario;
        
        this.usuario.codificar_historico(this.todos_produtos, this.n_produtos, entrada_codificada);
        
        rede = new RedeNeural();
        rede.inicializar(this.n_produtos, 10, this.n_produtos);
        
        rede.forward(entrada_codificada, saida);
        
        print("Produtos recomendados para voce:\n");
        
        for i = 0; i < this.n_produtos; i = i + 1 {
            if saida[i] > 0.5 {
                ja_comprou = 0;
                for j = 0; j < user_local.n_historico; j = j + 1 {
                    if user_local.historico_compras[j] == this.todos_produtos[i] {
                        ja_comprou = 1;
                    }
                }
                if ja_comprou == 0 {
                    print(this.todos_produtos[i]);
                    print("\n");
                }
            }
        }
    }
}

SEQ {
    Categoria cat_eletronicos;
    Categoria cat_roupas;
    Categoria cat_eletrodomesticos;
    Categoria cat_livros;
    Usuario usuario;
    Recomendador recomendador;
    INT i;
    
    STRING eletronicos[4];
    STRING roupas[4];
    STRING eletrodomesticos[4];
    STRING livros[4];
    STRING historico[4];
    
    eletronicos[0] = "Smartphone";
    eletronicos[1] = "Laptop";
    eletronicos[2] = "Tablet";
    eletronicos[3] = "Fones de ouvido";
    
    roupas[0] = "Camisa";
    roupas[1] = "Jeans";
    roupas[2] = "Jaqueta";
    roupas[3] = "Sapatos";
    
    eletrodomesticos[0] = "Geladeira";
    eletrodomesticos[1] = "Micro-ondas";
    eletrodomesticos[2] = "Maquina de lavar";
    eletrodomesticos[3] = "Ar condicionado";
    
    livros[0] = "Ficcao";
    livros[1] = "Nao-ficcao";
    livros[2] = "Ficcao cientifica";
    livros[3] = "Fantasia";
    
    cat_eletronicos = new Categoria();
    cat_eletronicos.inicializar("Eletronicos");
    for i = 0; i < 4; i = i + 1 {
        cat_eletronicos.adicionarProduto(eletronicos[i]);
    }
    
    cat_roupas = new Categoria();
    cat_roupas.inicializar("Roupas");
    for i = 0; i < 4; i = i + 1 {
        cat_roupas.adicionarProduto(roupas[i]);
    }
    
    cat_eletrodomesticos = new Categoria();
    cat_eletrodomesticos.inicializar("Eletrodomesticos");
    for i = 0; i < 4; i = i + 1 {
        cat_eletrodomesticos.adicionarProduto(eletrodomesticos[i]);
    }
    
    cat_livros = new Categoria();
    cat_livros.inicializar("Livros");
    for i = 0; i < 4; i = i + 1 {
        cat_livros.adicionarProduto(livros[i]);
    }
    
    historico[0] = "Smartphone";
    historico[1] = "Jeans";
    historico[2] = "Micro-ondas";
    historico[3] = "Ficcao";
    
    usuario = new Usuario();
    usuario.inicializar();
    for i = 0; i < 4; i = i + 1 {
        usuario.adicionarCompra(historico[i]);
    }
    
    recomendador = new Recomendador();
    recomendador.inicializar(usuario);
    recomendador.adicionarCategoria(cat_eletronicos);
    recomendador.adicionarCategoria(cat_roupas);
    recomendador.adicionarCategoria(cat_eletrodomesticos);
    recomendador.adicionarCategoria(cat_livros);
    
    recomendador.recomendar();
}
